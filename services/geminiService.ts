import type { TestAnswers, ChatMessage } from "../types";

// Direct fetch calls to our proxy instead of using @google/genai library
const PROXY_BASE_URL = "/api-proxy";
let chatHistory: ChatMessage[] = [];

const TUTOR_SYSTEM_INSTRUCTION = `
Voc√™ √© o Professor S√°bio, um tutor amig√°vel e paciente. Sua miss√£o √© ajudar uma crian√ßa de 9 anos a estudar para uma prova de portugu√™s. O conte√∫do que voc√™ deve ensinar √© EXCLUSIVamente sobre:
1.  Palavras Primitivas e Derivadas (fam√≠lias de palavras).
2.  Prefixos e Sufixos (superpoderes das palavras).
3.  Elementos da Narrativa (Personagens, Cen√°rio, Conflito, Resolu√ß√£o).
4.  Ponto de Vista (Narrador em 1¬™ ou 3¬™ pessoa).
5.  Infer√™ncia (ler nas entrelinhas).

REGRAS IMPORTANTES:
- Responda de forma simples, curta e muito encorajadora.
- Use emojis para deixar a conversa divertida. ü¶â‚ú®
- SEMPRE se mantenha DENTRO dos t√≥picos listados acima.
- Se a crian√ßa perguntar algo fora do t√≥pico (como matem√°tica, jogos ou outros assuntos), responda gentilmente: "Essa √© uma √≥tima pergunta! Mas nossa miss√£o agora √© focar nos segredos das palavras e hist√≥rias. Que tal voltarmos para o nosso mapa do tesouro? üòâ".
- Trate a crian√ßa como um "jovem detetive".
`;

const getTestEvaluationPrompt = (answers: TestAnswers) => `
Voc√™ √© um professor muito gentil e encorajador, avaliando a prova de um aluno de 9 anos. O nome do aluno √© ${answers.name || "Jovem Detetive"}.

Aqui est√£o as respostas dele:
- Pergunta 1 (Fam√≠lia da palavra SOL): "${answers.question1 || "N√£o respondeu"}"
- Pergunta 2a (gosto + -oso): Palavra: "${answers.question2a_word || "N√£o respondeu"}". Significado: "${answers.question2a_meaning || "N√£o respondeu"}"
- Pergunta 2b (surfar + -ista): Palavra: "${answers.question2b_word || "N√£o respondeu"}"
- Pergunta 2c (justo + in-): Palavra: "${answers.question2c_word || "N√£o respondeu"}"
- Pergunta 3 (Profiss√µes): Dentista: "${answers.question3_dentist || "N√£o respondeu"}", Pintor: "${answers.question3_painter || "N√£o respondeu"}", Floricultura: "${answers.question3_flowershop || "N√£o respondeu"}"
- Pergunta 4 (Personagens): "${answers.question4 || "N√£o respondeu"}"
- Pergunta 5 (Conflito): "${answers.question5 || "N√£o respondeu"}"
- Pergunta 6 (Narrador): "${answers.question6 || "N√£o respondeu"}"
- Pergunta 7 (Infer√™ncia - plano do esquilo): "${answers.question7 || "N√£o respondeu"}"

Aqui est√° o gabarito com as respostas esperadas:
- Pergunta 1: Exemplos: SOLAR (relativo ao sol), ENSOLARADO (com muito sol), GIRASSOL (flor que gira para o sol). O importante √© ter "sol" na base e fazer sentido.
- Pergunta 2a: Palavra: "gostoso". Significado: "cheio de gosto" ou "com muito sabor".
- Pergunta 2b: Palavra: "surfista".
- Pergunta 2c: Palavra: "injusto".
- Pergunta 3: Dentista, Pintor, Floricultura.
- Pergunta 4: O esquilo e o gato.
- Pergunta 5: O esquilo est√° com medo porque o gato quer ca√ß√°-lo, e o esquilo est√° pensando em um plano para se defender ou enganar o gato.
- Pergunta 6: Algu√©m de fora contando a hist√≥ria (em 3¬™ pessoa).
- Pergunta 7: Que o esquilo ia enganar o gato, pregar uma pe√ßa, jogar algo nele, etc. A ideia √© que ele n√£o ia ficar parado esperando.

Sua tarefa √© comparar as respostas do aluno com o gabarito e fornecer um feedback em portugu√™s.
- Para cada quest√£o, diga se est√° certa ou o que pode ser melhorado.
- Use uma linguagem simples, positiva e que uma crian√ßa de 9 anos entenda.
- Comece o feedback com "### Ol√°, detetive ${answers.name || "!"}! üïµÔ∏è‚Äç‚ôÇÔ∏è\n\nAnalisei sua miss√£o e aqui est√° o resultado:".
- Use emojis para deixar o texto mais amig√°vel.
- Use markdown para formatar o texto (t√≠tulos com '###', listas com '*' e negrito com '**').
- Termine com uma mensagem de incentivo como "Voc√™ foi incr√≠vel nesta miss√£o! Continue praticando e voc√™ se tornar√° um mestre detetive das palavras! üåü".
- N√£o d√™ uma nota num√©rica. Apenas o feedback qualitativo.
- Seja breve e direto em cada ponto.
`;

// Helper function to make API calls through our proxy
const callGeminiAPI = async (contents: any[], systemInstruction?: string) => {
  const requestBody: any = {
    contents: contents,
    generationConfig: {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 12288,
    },
  };

  if (systemInstruction) {
    requestBody.systemInstruction = {
      parts: [{ text: systemInstruction }],
    };
  }

  const response = await fetch(`${PROXY_BASE_URL}/v1beta/models/gemini-2.5-flash:generateContent`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(requestBody),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`API Error: ${response.status} - ${JSON.stringify(errorData)}`);
  }

  const data = await response.json();
  return data.candidates[0].content.parts[0].text;
};

export const evaluateTest = async (answers: TestAnswers): Promise<string> => {
  try {
    const prompt = getTestEvaluationPrompt(answers);
    const response = await callGeminiAPI([{ role: "user", parts: [{ text: prompt }] }]);
    return response;
  } catch (error) {
    console.error("Error evaluating test:", error);
    return "Ops! Ocorreu um erro ao tentar corrigir sua prova. Por favor, tente novamente mais tarde.";
  }
};

export const getTutorResponse = async (
  history: ChatMessage[],
  newMessage: string,
): Promise<string> => {
  try {
    // Build conversation history for the API
    const conversationHistory = [
      {
        role: "user",
        parts: [{ text: TUTOR_SYSTEM_INSTRUCTION }],
      },
      ...history.map((msg) => ({
        role: msg.role,
        parts: [{ text: msg.text }],
      })),
      {
        role: "user",
        parts: [{ text: newMessage }],
      },
    ];

    const response = await callGeminiAPI(conversationHistory);
    return response;
  } catch (error) {
    console.error("Error getting tutor response:", error);
    return "Oh n√£o! Meu c√©rebro de coruja deu um n√≥. Podemos tentar essa pergunta de novo?";
  }
};
